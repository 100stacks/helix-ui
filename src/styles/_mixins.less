/* HelixUI Mixins */

/* ----- GRID ----- */
//e.g. .hxSpan--1, .hxSpan--md-12
.make-grid-columns (@prefix, @n) when (@n > 0 ) and (@prefix = xs) {
  .hxSpan--@{n},
  .hxSpan--@{prefix}-@{n} {
    @width: (@n * @grid-column-unit);
    min-width: @width;
    width: @width;
  }
  .make-grid-columns(@prefix, (@n - 1));
}
.make-grid-columns (@prefix, @n) when (@n > 0 ) and not (@prefix = xs) {
  .hxSpan--@{prefix}-@{n} {
    @width: (@n * @grid-column-unit);
    min-width: @width;
    width: @width;
  }
  .make-grid-columns(@prefix, (@n - 1));
}
//e.g. .hxOffset--1, .hxOffset--md-6
.make-grid-offsets (@prefix, @n) when (@n > 0) and (@prefix = xs) {
  .hxOffset--@{n},
  .hxOffset--@{prefix}-@{n} {
    margin-left: (@n * @grid-column-unit) !important;
  }
  .make-grid-offsets(@prefix, (@n - 1));
}
.make-grid-offsets (@prefix, @n) when (@n > 0) and not (@prefix = xs) {
  .hxOffset--@{prefix}-@{n} {
    margin-left: (@n * @grid-column-unit) !important;
  }
  .make-grid-offsets(@prefix, (@n - 1));
}
//e.g. .hxOrder--1, .hxOrder--md-4
.make-grid-orders (@prefix, @n) when (@n > 0) and (@prefix = xs) {
  .hxOrder--@{n},
  .hxOrder--@{prefix}-@{n} {
    order: @n;
  }
  .make-grid-orders(@prefix, (@n - 1));
}
.make-grid-orders (@prefix, @n) when (@n > 0) and not (@prefix = xs) {
  .hxOrder--@{prefix}-@{n} {
    order: @n;
  }
  .make-grid-orders(@prefix, (@n - 1));
}

.make-grid (@prefix) {
  .make-grid-columns(@prefix, @grid-column-count);
  .make-grid-offsets(@prefix, @grid-column-count);
  .make-grid-orders(@prefix, @grid-column-count);
}

/* ----- Custom Props ----- */
// EXAMPLE: .customProp(color, --my-var, #333);
.customProp (@prop, @val, @fallback) {
  @{prop}: @fallback; // doesn't support custom property
  @{prop}: var(@val, @fallback); // supports custom property
}
